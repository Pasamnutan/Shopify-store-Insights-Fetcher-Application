import React, { useState } from 'react';
import { Download, FileText, Database, Calendar, Filter, CheckCircle, AlertCircle, Loader } from 'lucide-react';
import { apiService } from '../../services/api';

interface ExportResult {
  export_id: string;
  format: string;
  data_types: string[];
  file_size: string;
  download_url: string;
  expires_at: string;
}

export function DataExportTab() {
  const [selectedFormat, setSelectedFormat] = useState('json');
  const [selectedData, setSelectedData] = useState<string[]>(['products']);
  const [dateRange, setDateRange] = useState({
    start: '',
    end: ''
  });
  const [loading, setLoading] = useState(false);
  const [exportResult, setExportResult] = useState<ExportResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const dataTypes = [
    { id: 'products', label: 'Product Catalog', description: 'All product information and metadata' },
    { id: 'competitors', label: 'Competitor Analysis', description: 'Competitive intelligence data' },
    { id: 'policies', label: 'Store Policies', description: 'Privacy, return, and refund policies' },
    { id: 'social', label: 'Social Media Data', description: 'Social handles and engagement metrics' },
    { id: 'contacts', label: 'Contact Information', description: 'Email addresses and phone numbers' },
    { id: 'faqs', label: 'FAQ Data', description: 'Frequently asked questions and answers' }
  ];

  const formats = [
    { id: 'json', label: 'JSON', icon: FileText, description: 'JavaScript Object Notation' },
    { id: 'csv', label: 'CSV', icon: Database, description: 'Comma Separated Values' },
    { id: 'xlsx', label: 'Excel', icon: FileText, description: 'Microsoft Excel format' },
    { id: 'pdf', label: 'PDF', icon: FileText, description: 'Portable Document Format' }
  ];

  const recentExports = [
    {
      filename: 'memy_co_in_analysis_2024_01_15.json',
      size: '2.3 MB',
      date: '2024-01-15',
      type: 'Complete Analysis',
      downloadUrl: '/download/memy_co_in_analysis_2024_01_15.json'
    },
    {
      filename: 'competitor_analysis_fashion_2024_01_14.csv',
      size: '1.8 MB',
      date: '2024-01-14',
      type: 'Competitor Data',
      downloadUrl: '/download/competitor_analysis_fashion_2024_01_14.csv'
    },
    {
      filename: 'product_catalog_export_2024_01_13.xlsx',
      size: '4.1 MB',
      date: '2024-01-13',
      type: 'Product Catalog',
      downloadUrl: '/download/product_catalog_export_2024_01_13.xlsx'
    }
  ];

  const toggleDataType = (dataType: string) => {
    setSelectedData(prev => 
      prev.includes(dataType)
        ? prev.filter(type => type !== dataType)
        : [...prev, dataType]
    );
  };

  const handleExport = async () => {
    if (selectedData.length === 0) return;
    
    setLoading(true);
    setError(null);
    setExportResult(null);
    
    try {
      const result = await apiService.exportData(selectedFormat, selectedData);
      setExportResult(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to export data');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async (downloadUrl: string, filename: string) => {
    try {
      // For demo purposes, create a mock file download
      const mockData = {
        export_info: {
          filename,
          generated_at: new Date().toISOString(),
          format: selectedFormat,
          data_types: selectedData
        },
        sample_data: {
          products: [
            { name: "Sample Product 1", price: "$29.99", category: "Fashion" },
            { name: "Sample Product 2", price: "$45.00", category: "Accessories" }
          ],
          analysis_summary: "This is a sample export file generated by the Shopify Insights Platform."
        }
      };
      
      const blob = new Blob([JSON.stringify(mockData, null, 2)], { type: 'application/json' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (err) {
      setError('Failed to download file');
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">Data Export</h2>
        <p className="text-gray-600 mb-6">
          Export your collected insights and analysis data in various formats for further processing or reporting.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Export Configuration */}
        <div className="space-y-6">
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Select Data Types</h3>
            <div className="space-y-3">
              {dataTypes.map((dataType) => (
                <label key={dataType.id} className="flex items-start space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={selectedData.includes(dataType.id)}
                    onChange={() => toggleDataType(dataType.id)}
                    className="mt-1 h-4 w-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
                  />
                  <div>
                    <p className="font-medium text-gray-900">{dataType.label}</p>
                    <p className="text-sm text-gray-600">{dataType.description}</p>
                  </div>
                </label>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Export Format</h3>
            <div className="grid grid-cols-2 gap-3">
              {formats.map((format) => (
                <button
                  key={format.id}
                  onClick={() => setSelectedFormat(format.id)}
                  className={`p-4 border rounded-lg text-left transition-colors ${
                    selectedFormat === format.id
                      ? 'border-purple-500 bg-purple-50 text-purple-700'
                      : 'border-gray-200 hover:border-gray-300 text-gray-700'
                  }`}
                >
                  <div className="flex items-center space-x-2 mb-1">
                    <format.icon className="w-4 h-4" />
                    <span className="font-medium">{format.label}</span>
                  </div>
                  <p className="text-xs text-gray-600">{format.description}</p>
                </button>
              ))}
            </div>
          </div>

          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Date Range</h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                <input
                  type="date"
                  value={dateRange.start}
                  onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                <input
                  type="date"
                  value={dateRange.end}
                  onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
              </div>
            </div>
          </div>

          <button
            onClick={handleExport}
            disabled={selectedData.length === 0 || loading}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
          >
            {loading ? (
              <>
                <Loader className="w-4 h-4 animate-spin" />
                <span>Preparing Export...</span>
              </>
            ) : (
              <>
                <Download className="w-4 h-4" />
                <span>Export Data</span>
              </>
            )}
          </button>

          {error && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg flex items-start space-x-3">
              <AlertCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
              <div>
                <p className="text-red-800 font-medium">Export Failed</p>
                <p className="text-red-700 text-sm mt-1">{error}</p>
              </div>
            </div>
          )}

          {exportResult && (
            <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
              <div className="flex items-start space-x-3">
                <CheckCircle className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" />
                <div className="flex-1">
                  <p className="text-green-800 font-medium">Export Ready!</p>
                  <p className="text-green-700 text-sm mt-1">
                    Your {exportResult.format.toUpperCase()} export ({exportResult.file_size}) is ready for download.
                  </p>
                  <button
                    onClick={() => handleDownload(exportResult.download_url, `export_${exportResult.export_id}.${exportResult.format}`)}
                    className="mt-3 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-sm font-medium"
                  >
                    Download Now
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Recent Exports */}
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-100">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Exports</h3>
          <div className="space-y-4">
            {recentExports.map((export_, index) => (
              <div key={index} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <FileText className="w-5 h-5 text-purple-600" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-900 text-sm">{export_.filename}</p>
                    <div className="flex items-center space-x-3 text-xs text-gray-500">
                      <span>{export_.size}</span>
                      <span>•</span>
                      <span>{export_.date}</span>
                      <span>•</span>
                      <span>{export_.type}</span>
                    </div>
                  </div>
                </div>
                <button 
                  onClick={() => handleDownload(export_.downloadUrl, export_.filename)}
                  className="text-purple-600 hover:text-purple-700 text-sm font-medium"
                >
                  Download
                </button>
              </div>
            ))}
          </div>

          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <div className="flex items-start space-x-3">
              <Database className="w-5 h-5 text-blue-600 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-blue-900">Storage Information</p>
                <p className="text-xs text-blue-700 mt-1">
                  Exported files are stored for 30 days and then automatically deleted. 
                  Download important exports to your local storage.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}